<%- include("../../views/partials/admin/adminheader") %>
<%- include("../../views/partials/admin/adminsidebar") %>

<head>
    <link rel="stylesheet" href="/css/admin.css">
    <!-- Bootstrap CSS (if needed) -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

<!-- Bootstrap Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"> -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .content-main {
            margin-left: 280px;
            margin-top: 3%;
            width: 85%;
        }

        /* Thumbnails */
        .thumbnails-container {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 10px;
        }

        .thumbnail {
            position: relative;
            display: inline-block;
        }

        .thumbnail img {
            width: 60px;
            height: 60px;
            border-radius: 4px;
            object-fit: cover;
            cursor: pointer;
            transition: 0.3s ease;
            border: 1px solid #ddd;
        }

        .thumbnail .delete-btn {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: red;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            text-align: center;
            line-height: 20px;
            font-size: 14px;
            cursor: pointer;
            opacity: 0.7;
            transition: opacity 0.2s ease;
        }

        .thumbnail .delete-btn:hover {
            opacity: 1;
        }

        /* Error Messages */
        .error-message {
            color: red;
            font-size: 14px;
            margin-top: 5px;
            display: none;
        }
    </style>
</head>

<header>
    <div class="content-header">
        <h2 class="content-title">Edit Product</h2>
    </div>
</header>

<section class="content-main">
    <div class="row">
        <div class="col-lg-8">
            <div class="card mb-4">
                <div class="card-body">
                    <!-- Use normal form submission instead of AJAX to avoid potential server-side parsing issues -->
                    <form id="editProductForm" method="POST" action="/admin/edit-Products/<%= product._id %>" enctype="multipart/form-data" onsubmit="return validateForm()">

                        <!-- Product Name -->
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="productName" value="<%= product.productName %>" class="form-control border" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <!-- Brand Dropdown -->
                        <div class="mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select border" name="brand" id="brand">
                                <% brand.forEach(brand => { %>
                                    <option value="<%= brand._id %>" <%= brand._id.equals(product.brand) ? 'selected' : '' %>>
                                        <%= brand.brandName %>
                                    </option>
                                <% }) %>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>

                        <!-- Category Dropdown -->
                        <div class="mb-4">
                            <label class="form-label">Category</label>
                            <select class="form-select border" name="category" id="category">
                                <% cat.forEach(cat => { %>
                                    <option value="<%= cat._id %>" <%= cat._id.equals(product.category) ? 'selected' : '' %>>
                                        <%= cat.name %>
                                    </option>
                                <% }) %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>

                        <!-- Description -->
                        <div class="mb-4">
                            <label class="form-label">Full Description</label>
                            <textarea name="description" id="description" class="form-control border" rows="4"><%= product.description %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <!-- Pricing and Quantity -->
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular Price</label>
                                    <input type="number" name="regularPrice" id="regularPrice" value="<%= product.regularPrice %>" class="form-control border">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>

                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale Price</label>
                                    <input disabled type="number" name="salePrice" id="salePrice" value="<%= product.salePrice %>" class="form-control border">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>

                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input type="number" name="quantity" id="quantity" value="<%= product.quantity %>" class="form-control border">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Existing Images -->
                        <div class="mb-4">
                            <label class="form-label">Existing Images</label>
                            <div class="thumbnails-container" id="existingImagesContainer">
                                <% product.productImage.forEach((img, index) => {%>
                                    <div class="thumbnail" id="existing-img-<%= index %>">
                                        <img src="/uploads/re-image/<%= img %>" alt="Product Image">
                                        <span class="delete-btn" onclick="deleteExistingImage('<%= product._id %>', '<%= img %>', '<%= index %>')">&times;</span>
                                    </div>
                                <% }) %>
                            </div>
                        </div>

                        <!-- Image Upload Section -->
                        <div class="mb-4">
                            <label class="form-label">Add New Images</label>
                            <div id="images-error" class="error-message"></div>
                            <div class="row">
                                <% for (let i = 1; i <= 4; i++) { %>
                                    <div class="col-md-3">
                                        <div class="card-body p-2 d-flex flex-column align-items-center">
                                            <img src="" alt="" id="imgView<%= i %>" style="max-width: 100px; max-height: 100px;" />
                                            <input class="form-control form-control-sm" type="file" name="images" id="input<%= i %>"
                                                accept="image/png, image/jpeg, image/jpg" onchange="viewImage(event, '<%= i %>')" />
                                        </div>
                                        <div class="image-cropper d-flex flex-column align-items-center" id="cropperContainer<%= i %>"
                                            style="display: none; width: 200px; height: 150px;">
                                            <img src="" id="croppedImg<%= i %>" alt="" style="width: 100px; height: 100px;" />
                                            <button type="button" id="saveButton<%= i %>" class="btn btn-sm btn-primary mt-2">Save</button>
                                        </div>
                                    </div>
                                <% } %>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <button type="submit" class="btn btn-primary">Update Product</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script>
    // Display success message if redirected from server with success flag
    document.addEventListener('DOMContentLoaded', function() {
        const urlParams = new URLSearchParams(window.location.search);
        const successMsg = urlParams.get('success');
        const errorMsg = urlParams.get('error');
        
        if (successMsg) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Product updated successfully!',
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'OK'
            });
        } else if (errorMsg) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: decodeURIComponent(errorMsg),
                confirmButtonColor: '#d33',
                confirmButtonText: 'Try Again'
            });
        }
    });

    // Store cropper instances
    let cropperInstances = {};

    // Handle image preview and cropping
    function viewImage(event, index) {
        let input = event.target;
        if (!input.files || input.files.length === 0) return;

        let reader = new FileReader();

        reader.onload = function () {
            let dataURL = reader.result;
            let image = document.getElementById(`imgView${index}`);
            image.src = dataURL;

            // Destroy any existing cropper instance
            if (cropperInstances[index]) {
                cropperInstances[index].destroy();
            }

            // Initialize Cropper.js
            let cropper = new Cropper(image, {
                aspectRatio: 1,
                viewMode: 1,
                guides: true,
                background: false,
                autoCropArea: 1,
                zoomable: true
            });

            cropperInstances[index] = cropper;

            // Show cropping container
            let cropperContainer = document.getElementById(`cropperContainer${index}`);
            cropperContainer.style.display = 'block';

            // Set up save button click handler
            let saveButton = document.getElementById(`saveButton${index}`);
            saveButton.replaceWith(saveButton.cloneNode(true));
            saveButton = document.getElementById(`saveButton${index}`);

            saveButton.addEventListener('click', function () {
                // Get the cropped canvas
                let croppedCanvas = cropper.getCroppedCanvas();
                let croppedImage = document.getElementById(`croppedImg${index}`);
                croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

                // Create a file from the canvas
                let timestamp = new Date().getTime();
                let fileName = `cropped-img-${timestamp}-${index}.png`;

                croppedCanvas.toBlob(blob => {
                    let imgFile = new File([blob], fileName, { type: "image/png" });

                    // Replace the file in the input
                    let inputField = document.getElementById(`input${index}`);
                    if (inputField) {
                        const fileList = new DataTransfer();
                        fileList.items.add(imgFile);
                        inputField.files = fileList.files;
                    }
                });

                // Hide cropper container after saving
                cropperContainer.style.display = 'none';
            });
        };

        reader.readAsDataURL(input.files[0]);
    }

    // Delete existing image with SweetAlert
    function deleteExistingImage(productId, fileName, index) {  
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                // Using the same endpoint and method as in the deleteSingleImage function
                fetch('/admin/deleteImage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        imageNameToServer: fileName,
                        productIdToServer: productId,
                        imageIndex: index
                    }),
                })
                .then(response => {
                    // Try to parse JSON even if response is not OK
                    return response.json().catch(e => {
                        throw {
                            status: response.status,
                            statusText: response.statusText,
                            message: 'Failed to parse server response'
                        };
                    });
                })
                .then(data => {
                    if (data.status) {
                        // Remove the image from the DOM without reloading
                        document.getElementById(`existing-img-${index}`).remove();
                        
                        Swal.fire(
                            'Deleted!',
                            'Image has been deleted.',
                            'success'
                        );
                    } else {
                        Swal.fire(
                            'Error!',
                            data.message || 'Failed to delete image',
                            'error'
                        );
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire(
                        'Error!',
                        error.message || 'An error occurred while deleting the image.',
                        'error'
                    );
                });
            }
        });
    }

    // Form validation
    function validateForm() {
        clearErrorMessages();
        
        // Get form elements
        const name = document.getElementById('product_name').value;
        const description = document.getElementById('description').value;
        const category = document.getElementById('category').value;
        const brand = document.getElementById('brand').value;
        const regularPrice = document.getElementById('regularPrice').value;
        const salePrice = document.getElementById('salePrice').value;
        const quantity = document.getElementById('quantity').value;
        
        let isValid = true;

        // Validate product name
        if (!name || name.trim() === '') {
            displayErrorMessage('productName-error', "Product name can't be empty");
            isValid = false;
        } else {
            const nameregex = /^[a-zA-Z][a-zA-Z0-9\/\-\s]*$/;
            if (!nameregex.test(name)) {
                displayErrorMessage('productName-error', "Enter a valid product name");
                isValid = false;
            }
        }

        // Validate description
        if (!description || description.trim() === '') {
            displayErrorMessage('description-error', "Description can't be empty");
            isValid = false;
        } else {
            const descriptionregex = /^[A-Za-z].*/;
            if (!descriptionregex.test(description)) {
                displayErrorMessage('description-error', "Enter a valid description");
                isValid = false;
            }
        }

        // Validate category selection
        if (!category || category.trim() === '') {
            displayErrorMessage('category-error', "Please select a category");
            isValid = false;
        }

        // Validate brand selection
        if (!brand || brand.trim() === '') {
            displayErrorMessage('brand-error', "Please select a brand");
            isValid = false;
        }

        // Validate regular price
        if (regularPrice.trim() === '' || !/^\d+(\.\d{1,2})?$/.test(regularPrice)) {
            displayErrorMessage('regularPrice-error', "Please enter a valid non-negative price.");
            isValid = false;
        }

        // Validate sale price
        if (salePrice.trim() === '' || !/^\d+(\.\d{1,2})?$/.test(salePrice)) {
            displayErrorMessage('salePrice-error', "Please enter a valid non-negative price.");
            isValid = false;
        } else if (parseFloat(regularPrice) < parseFloat(salePrice)) {
            displayErrorMessage('salePrice-error', "Sale price can't be greater than Regular price");
            isValid = false;
        }
        
        // Validate quantity
        if (quantity.trim() === '' || !/^\d+$/.test(quantity)) {
            displayErrorMessage('quantity-error', "Please enter a valid number as quantity");
            isValid = false;
        }

        return isValid;
    }

    // Display error message
    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }
    }
    
    // Clear all error messages
    function clearErrorMessages() {

        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(element => {
            element.innerText = '';
            element.style.display = "none";
        });
    }

    

    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("editProductForm");

        form.addEventListener("submit", async function (event) {
            event.preventDefault(); // Prevent default form submission

            const formData = new FormData(form);

            try {
                const response = await fetch(form.action, {
                    method: "POST",
                    body: formData
                });

                const result = await response.json(); // Convert response to JSON

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: result.message || 'Product updated successfully',
                    }).then(() => {
                        window.location.href = "/admin/products"; // Redirect on success
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: result.error || 'Something went wrong!',
                    });
                }

            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Internal Server Error. Please try again later.',
                });
            }
        });
    });


</script>