
<%- include("../../views/partials/admin/adminsidebar") %>

<link rel="stylesheet" href="/css/admin.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<style>
   :root {
      --primary-color: #1e90ff;
      --secondary-color: #2d3436;
      --success-color: #00b894;
      --danger-color: #d63031;
      --info-color: #0984e3;
      --light-gray: #dfe6e9;
      --background-color: #f5f6fa;
      --white: #ffffff;
      --shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
      --transition: all 0.3s ease;
    }
    
    /* Responsive container */
    .main-container {
        width: 100%;
        padding-right: 15px;
        padding-left: 15px;
        margin-right: auto;
        margin-left: auto;
        transition: all 0.3s;
    }
    
    @media (min-width: 768px) {
        .main-container {
            margin-left: 250px;
            width: calc(100% - 265px);
        }
    }
    
    @media (max-width: 767px) {
        .main-container {
            margin-left: 0;
            margin-top: 70px;
        }
    }
    
    /* Table styles */
    .order-table th, .order-table td {
        vertical-align: middle;
    }
    
    .status-badge {
        padding: 6px 12px;
        border-radius: 15px;
        font-weight: 500;
        display: inline-block;
        text-align: center;
        white-space: nowrap;
    }
    
    /* Button group styling */
    .order-actions {
        display: flex;
        flex-direction: column;
        gap: 8px;
        align-items: center;
    }
    
    .action-btn-group {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        justify-content: center;
    }
    
    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        border-radius: 4px;
    }
    
    /* Filter form */
    .filter-form {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        margin-bottom: 20px;
    }
    
    .custom-select {
        background-color: #fff;
        color: #333;
        padding: 8px;
        border-radius: 8px;
        transition: all 0.3s ease-in-out;
    }
    
    .custom-select:focus {
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        border-color: #007bff;
    }
    
    .form-control {
        border-radius: 8px;
    }
    
    .btn {
        border-radius: 8px;
    }
    
    .form-control:focus, .custom-select:focus {
        outline: none;
    }
    
    /* Pagination */
    .pagination {
        margin-top: 20px;
        justify-content: center;
        align-items: center;
    }

    .pagination a {
        padding: 8px;
        margin: 4px;
        text-decoration: none;
        background-color: white;
        color: black;
        font-weight: bold;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 35px;
        height: 35px;
        transition: all 0.2s;
    }

    .pagination a i {
        font-size: 14px;
    }

    .pagination a.active {
        background-color: #0d6efd;
        color: white;
    }
    
    .pagination a:hover:not(.active) {
        background-color: #f1f1f1;
    }
    
    /* Responsive table */
    @media (max-width: 992px) {
        .table-responsive {
            overflow-x: auto;
        }
        
        .order-table th, .order-table td {
            white-space: nowrap;
        }
    }
    
    /* Card styling */
    .card {
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }
    
    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
        font-weight: bold;
    }
</style>

<div class="main-container content-wrapper">
    <header>
        <h1 class="mt-4 mb-4">Order Management</h1>
    </header>
    
    <!-- Filter Form -->
    <form method="GET" action="/admin/orders" class="filter-form">
        <div class="row g-3">
            <!-- Search Input -->
            <div class="col-md-4 col-sm-12">
                <div class="input-group">
                    <input type="text" name="search" class="form-control border-primary" placeholder="Search Order ID or Name" value="<%= search %>">
                    <button type="submit" name="action" value="search" class="btn btn-primary">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>
    
            <!-- Status Filter -->
            <div class="col-md-3 col-sm-6">
                <select name="status" class="form-select border-primary custom-select">
                    <option value="all" <%= status === 'all' ? 'selected' : '' %>>All Status</option>
                    <option value="returned" <%= status === 'Returned' ? 'selected' : '' %>>Returned</option>
                    <option value="Processing" <%= status === 'Processing' ? 'selected' : '' %>>Processing</option>
                    <option value="Shipped" <%= status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                    <option value="delivered" <%= status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                    <option value="cancelled" <%= status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                </select>
            </div>
    
            <!-- Sorting Options -->
            <div class="col-md-2 col-sm-6">
                <select name="sortField" class="form-select border-primary custom-select">
                    <option value="createdAt" <%= sortField === 'createdAt' ? 'selected' : '' %>>Date</option>
                    <option value="finalAmount" <%= sortField === 'finalAmount' ? 'selected' : '' %>>Price</option>
                </select>
            </div>
            <div class="col-md-2 col-sm-6">
                <select name="sortOrder" class="form-select border-primary custom-select">
                    <option value="desc" <%= sortOrder === -1 ? 'selected' : '' %>>Descending</option>
                    <option value="asc" <%= sortOrder === 1 ? 'selected' : '' %>>Ascending</option>
                </select>
            </div>
    
            <!-- Filter and Clear Buttons -->
            <div class="col-md-1 col-sm-6 d-flex justify-content-center">
                <button type="submit" class="btn btn-success w-100">
                    <i class="fas fa-filter me-1"></i> Filter
                </button>
            </div>
            <div class="col-md-1 col-sm-6 d-flex justify-content-center">
                <button type="button" class="btn btn-secondary w-100" onclick="clearFilters()">
                    <i class="fas fa-times me-1"></i> Clear
                </button>
            </div>
        </div>
    </form>
    
    <div class="card">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            All Orders
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped order-table">
                    <thead class="text-center">
                        <tr>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Customer</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% orders.forEach(order => { %>
                            <tr class="align-middle text-center">
                                <td><%= order.orderId %></td>
                                <td><%= new Date(order.createdAt).toLocaleDateString() %></td>
                                <td>
                                    <strong><%= order.userId.name %></strong>
                                </td>
                                <td>â‚¹<%= Math.round(order.finalAmount) %></td>
                                <td>
                                    <span class="status-badge <%= 
                                        order.status === 'delivered' ? 'bg-success text-white' :
                                        order.status === 'cancelled' ? 'bg-danger text-white' :
                                        order.status === 'shipped' ? 'bg-info text-white' :
                                        order.status === 'Return Requested' ? 'bg-warning text-dark' :
                                        order.status === 'returning' ? 'bg-info text-white' :
                                        order.status === 'returned' ? 'bg-secondary text-white' :
                                        'bg-warning text-dark'
                                    %>">
                                        <%= order.status.toUpperCase() %>
                                    </span>
                                </td>
                                <td>
                                    <div class="order-actions">
                                        <a href="/admin/adminOrders/<%= order._id %>" class="btn btn-primary btn-sm">
                                            <i class="fas fa-eye me-1"></i> View
                                        </a>
                                        
                                        <% if (order.status === 'Return Requested' && order.requestStatus === 'pending') { %>
                                            <div class="action-btn-group mt-2">
                                                <button onclick="handleReturn('approved', '<%= order._id %>')" 
                                                        class="btn btn-success btn-sm">
                                                    <i class="fas fa-check me-1"></i> Approve
                                                </button>
                                                <button onclick="handleReturn('rejected', '<%= order._id %>')" 
                                                        class="btn btn-danger btn-sm">
                                                    <i class="fas fa-times me-1"></i> Reject
                                                </button>
                                            </div>
                                        <% } else if (order.requestStatus === 'approved' && order.status != 'returned') { %>
                                            <button onclick="updateReturnStatus('<%= order._id %>')" 
                                                    class="btn btn-info btn-sm mt-2">
                                                <i class="fas fa-truck-loading me-1"></i> Update Return
                                            </button>
                                        <% } else if (!['cancelled', 'delivered', 'returned', 'Return Requested', 'returning'].includes(order.status)) { %>
                                            <div class="action-btn-group mt-2">
                                                <%if(order.status!='Pending'){%>
                                                <button onclick="updateStatus('<%= order._id %>')" 
                                                        class="btn btn-info btn-sm">
                                                    <i class="fas fa-sync-alt me-1"></i> Update
                                                </button>
                                                <%}%>
                                                <button onclick="cancelOrder('<%= order._id %>')" 
                                                        class="btn btn-danger btn-sm">
                                                    <i class="fas fa-ban me-1"></i> Cancel
                                                </button>
                                            </div>
                                        <% } %>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Pagination -->
    <div class="d-flex justify-content-center">
        <div class="pagination">
            <% if (currentPage > 1) { %>
                <a href="?page=<%= currentPage - 1 %>&search=<%= search %>&status=<%= status %>&sortField=<%= sortField %>&sortOrder=<%= sortOrder %>" class="prev-arrow">
                    <i class="fa fa-long-arrow-left" aria-hidden="true"></i>
                </a>
            <% } %>
        
            <% if (totalPages > 5 && currentPage > 3) { %>
                <a href="?page=1&search=<%= search %>&status=<%= status %>&sortField=<%= sortField %>&sortOrder=<%= sortOrder %>">1</a>
                <% if (currentPage > 4) { %>
                    <a href="#" class="dot-dot">
                        <i class="fa fa-ellipsis-h" aria-hidden="true"></i>
                    </a>
                <% } %>
            <% } %>
        
            <% for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) { %>
                <a href="?page=<%= i %>&search=<%= search %>&status=<%= status %>&sortField=<%= sortField %>&sortOrder=<%= sortOrder %>" class="<%= currentPage === i ? 'active' : '' %>"><%= i %></a>
            <% } %>
        
            <% if (totalPages > 5 && currentPage < totalPages - 2) { %>
                <% if (currentPage < totalPages - 3) { %>
                    <a href="#" class="dot-dot">
                        <i class="fa fa-ellipsis-h" aria-hidden="true"></i>
                    </a>
                <% } %>
                <a href="?page=<%= totalPages %>&search=<%= search %>&status=<%= status %>&sortField=<%= sortField %>&sortOrder=<%= sortOrder %>"><%= totalPages %></a>
            <% } %>
        
            <% if (currentPage < totalPages) { %>
                <a href="?page=<%= currentPage + 1 %>&search=<%= search %>&status=<%= status %>&sortField=<%= sortField %>&sortOrder=<%= sortOrder %>" class="next-arrow">
                    <i class="fa fa-long-arrow-right" aria-hidden="true"></i>
                </a>
            <% } %>
        </div>
    </div>
</div>

<!-- Rejection Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject Return Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Rejection Category</label>
                    <select class="form-select" id="rejectionCategory" required>
                        <option value="">Select a category</option>
                        <option value="Invalid reason">Invalid reason</option>
                        <option value="Outside return window">Outside return window</option>
                        <option value="Product condition">Product condition</option>
                        <option value="Policy violation">Policy violation</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Detailed Explanation</label>
                    <textarea class="form-control" id="rejectionReason" rows="3" placeholder="Please provide a detailed explanation for rejecting the return request..." required></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="submitRejection()">Submit</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    function clearFilters() {
        window.location.href = "/admin/orders";
    }

    let currentOrderId = null;

    async function updateStatus(orderId) {
        const { value: status } = await Swal.fire({
            title: 'Update Order Status',
            input: 'select',
            inputOptions: {
                'pending': 'Pending',
                'confirmed': 'Confirmed',
                'shipped': 'Shipped',
                'delivered': 'Delivered'
            },
            inputPlaceholder: 'Select status',
            showCancelButton: true,
            inputValidator: (value) => {
                if (!value) {
                    return 'You need to select a status!';
                }
            }
        });

        if (status) {
            try {
                const response = await fetch('/admin/updateStatus', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId, status }),
                });

                const data = await response.json();
                
                if (data.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Order status updated successfully',
                        timer: 1500
                    });
                    location.reload();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to update status'
                });
            }
        }
    }

    async function cancelOrder(orderId) {
        const result = await Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!'
        });

        if (result.isConfirmed) {
            try {
                const response = await fetch('/admin/orderCancel', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId }),
                });

                const data = await response.json();
                
                if (data.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Order cancelled successfully',
                        timer: 1500
                    });
                    location.reload();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to cancel order'
                });
            }
        }
    }

    async function handleReturn(action, orderId) {
        currentOrderId = orderId;
        
        if (action === 'rejected') {
            const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
            modal.show();
            return;
        }

        if (action === 'approved') {
            Swal.fire({
                title: 'Are you sure?',
                text: "You are about to approve this return request!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, approve it!'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch('/admin/handleReturn', {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                orderId: orderId,
                                action: action
                            })
                        });

                        const data = await response.json();
                        
                        if (data.success) {
                            Swal.fire(
                                'Approved!',
                                'Return request has been approved.',
                                'success'
                            ).then(() => {
                                location.reload();
                            });
                        } else {
                            throw new Error(data.message);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire(
                            'Error!',
                            error.message || 'Failed to approve return request',
                            'error'
                        );
                    }
                }
            });
        }
    }

    async function submitRejection() {
        const category = document.getElementById('rejectionCategory').value;
        const reason = document.getElementById('rejectionReason').value;
        
        if (!category || !reason) {
            alert('Please select a category and provide a detailed explanation');
            return;
        }

        try {
            const response = await fetch('/admin/handleReturn', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    orderId: currentOrderId,
                    action: 'rejected',
                    category: category,
                    message: reason
                })
            });

            const data = await response.json();
            
            if (data.success) {
                const modal = bootstrap.Modal.getInstance(document.getElementById('rejectModal'));
                modal.hide();
                Swal.fire(
                    'Rejected!',
                    'Return request has been rejected.',
                    'success'
                ).then(() => {
                    location.reload();
                });
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire(
                'Error!',
                error.message || 'Failed to reject return request',
                'error'
            );
        }
    }

    async function updateReturnStatus(orderId) {
        const { value: status } = await Swal.fire({
            title: 'Update Return Status',
            input: 'select',
            inputOptions: {
                'returning': 'Returning',
                'returned': 'Returned'
            },
            inputPlaceholder: 'Select status',
            showCancelButton: true,
            inputValidator: (value) => {
                if (!value) {
                    return 'You need to select a status!';
                }
            }
        });

        if (status) {
            try {
                const response = await fetch('/admin/updateReturnStatus', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId, status }),
                });

                const data = await response.json();
                
                if (data.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Return status updated successfully',
                        timer: 1500
                    });
                    location.reload();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to update status'
                });
            }
        }
    }
</script>